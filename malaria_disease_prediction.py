# -*- coding: utf-8 -*-
"""Malaria disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VXjCyiBDub2xnYBwfC5TxYlF10PbxWDS
"""

# Importing important libraries 
from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Sequential 

from glob import glob

import numpy as np
import matplotlib.pyplot as plt

# Checking tensorflow version
import tensorflow as tf
print(tf.__version__)

# Re-sizing all the images for a fixed value
image_size = [224,224]

# providing paths to train and test dataset
train_path = "/content/drive/MyDrive/Malaria Prediction/Dataset/Train"
test_path = "/content/drive/MyDrive/Malaria Prediction/Dataset/Test"

# Importing the VGG16 library for transfer learning processes

vgg19 = VGG19(input_shape=image_size+[3], include_top=False, weights="imagenet")

# Checking model summary pr structure

vgg19.summary()

# Not training already pre_trained weights
for layer in vgg19.layers:
  layer.trainable= False

# Getting number of classes in training set
folders = glob("/content/drive/MyDrive/Malaria Prediction/Dataset/Train/*")
folders

# Getting number of output classes in test dataset
test_folder = glob("/content/drive/MyDrive/Malaria Prediction/Dataset/Test/*")
test_folder

# Flattneing the last layer and then adding our own layer as our final output (prediction) layer
x = Flatten()(vgg19.output)
prediction = Dense(len(folders), activation='softmax')(x)

# After adding our own layer in place of input layer, creating our final model object
model = Model(inputs=vgg19.input, outputs=prediction)

# Checking our final neural network (model) summary or structure
model.summary()

# telling the model what cost and optimization method to use
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Now time to import our images from the dataset and creating new images from it to train our model
train_datagen = ImageDataGenerator(horizontal_flip=True, vertical_flip=True, validation_split=0.2, rescale=1./255, 
                                   zoom_range=0.2, shear_range=0.2)

test_datagen = ImageDataGenerator(rescale=1./255)

# Preparing our training and test dataset
# Making sure to provide the same target size as initialized for the image
training_set = train_datagen.flow_from_directory(train_path, 
                                                 target_size=(224,224), 
                                                 batch_size=32, 
                                                 class_mode='categorical')

training_set

# Doing the same thing above for our test dataset
test_set = test_datagen.flow_from_directory(test_path, target_size=(224,224), 
                                                 batch_size=32, 
                                                 class_mode='categorical')

# fitting the model
r = model.fit(training_set, validation_data=test_set, epochs=100, steps_per_epoch=len(training_set),
          validation_steps=len(test_set))

r.history

# plotting the accuracies and losses of train and validation dataset
plt.plot(r.history['accuracy'], label = 'train_accuracy')
plt.plot(r.history['val_accuracy'], label = 'val_accuracy')
plt.legend()
plt.show()
plt.savefig("malaria_accuracy")

plt.plot(r.history['loss'], label = 'train_loss')
plt.plot(r.history['val_loss'], label = 'val_loss')
plt.legend()
plt.show()
plt.savefig("malaria_loss")

# Making predictions from the model in the test set
y_pred = model.predict(test_set)

y_pred

# taking the index with maximum value in y_pred because thats our prediction which we are looking for
y_pred = np.argmax(y_pred, axis=1)
y_pred

# loading the model
model = load_model('malaria_vgg19_1.h5')

# loading a random image for testing
img = load_img('/content/drive/MyDrive/Malaria Prediction/Dataset/Test/Uninfected/C3thin_original_IMG_20150608_163002_cell_97.png',
                 target_size = (224,224))

img

# converting image to array so that the model can understand
vect_image = image.img_to_array(img)

vect_image

vect_image.shape

# rescaling our image/vect_image as we have done the same in our model
vect_image = vect_image/255

# Expanding the dimensions
vect_image= np.expand_dims(vect_image, axis=0)
img_data = preprocess_input(vect_image)
img_data.shape

# making predictions on processed image
pred = model.predict(img_data)

pred

# Taking the index of maximum value as our answer
final_pred = np.argmax(pred, axis=1)
final_pred

if (final_pred==1):
  print('uninfected')
else:
  print('parasite(infected)')

